use super::event::EventDirection;
use std::collections::HashMap;
lazy_static::lazy_static! {
 pub static ref SENSOR_GENERIC_EVENT_DESC: HashMap<u32, (&'static str,EventDirection)>  = {
  HashMap::from([
    // Event Type, Offset
    ((0x01 << 8),        ("Lower Non-critical-going low",EventDirection::Deassert)),
    ((0x01 << 8) | 0x01, ("Lower Non-critical-going high",EventDirection::Deassert)),
    ((0x01 << 8) | 0x02, ("Lower Critical-going low",EventDirection::Deassert)),
    ((0x01 << 8) | 0x03, ("Lower Critical-going high",EventDirection::Deassert)),
    ((0x01 << 8) | 0x04, ("Lower Non-recoverable-going low",EventDirection::Deassert)),
    ((0x01 << 8) | 0x05, ("Lower Non-recoverable-going high",EventDirection::Deassert)),
    ((0x01 << 8) | 0x06, ("Upper Non-critical-going low",EventDirection::Deassert)),
    ((0x01 << 8) | 0x07, ("Upper Non-critical-going high",EventDirection::Deassert)),
    ((0x01 << 8) | 0x08, ("Upper Critical-going low",EventDirection::Deassert)),
    ((0x01 << 8) | 0x09, ("Upper Critical-going high",EventDirection::Deassert)),
    ((0x01 << 8) | 0x0a, ("Upper Non-recoverable-going low",EventDirection::Deassert)),
    ((0x01 << 8) | 0x0b, ("Upper Non-recoverable-going high",EventDirection::Deassert)),
    ((0x02 << 8),        ("Transition to Idle",EventDirection::Assert)),
    ((0x02 << 8) | 0x01, ("Transition to Active",EventDirection::Assert)),
    ((0x02 << 8) | 0x02, ("Transition to Busy",EventDirection::Deassert)),
    ((0x03 << 8),        ("State Deasserted",EventDirection::Deassert)),
    ((0x03 << 8) | 0x01, ("State Asserted",EventDirection::Assert)),
    ((0x04 << 8),        ("Predictive Failure deasserted",EventDirection::Deassert)),
    ((0x04 << 8) | 0x01, ("Predictive Failure asserted",EventDirection::Assert)),
    ((0x05 << 8),        ("Limit Not Exceeded",EventDirection::Assert)),
    ((0x05 << 8) | 0x01, ("Limit Exceeded",EventDirection::Deassert)),
    ((0x06 << 8),        ("Performance Met",EventDirection::Assert)),
    ((0x06 << 8) | 0x01, ("Performance Lags",EventDirection::Deassert)),
    ((0x07 << 8),        ("transition to OK",EventDirection::Assert)),
    ((0x07 << 8) | 0x01, ("transition to Non-Critical from OK",EventDirection::Assert)),
    ((0x07 << 8) | 0x02, ("transition to Critical from less severe",EventDirection::Assert)),
    ((0x07 << 8) | 0x03, ("transition to Non-recoverable from less severe",EventDirection::Assert)),
    ((0x07 << 8) | 0x04, ("transition to Non-Critical from more severe",EventDirection::Assert)),
    ((0x07 << 8) | 0x05, ("transition to Critical from Non-recoverable",EventDirection::Assert)),
    ((0x07 << 8) | 0x06, ("transition to Non-recoverable",EventDirection::Assert)),
    ((0x07 << 8) | 0x07, ("Monitor",EventDirection::Assert)),
    ((0x07 << 8) | 0x08, ("Informational",EventDirection::Assert)),
    ((0x08 << 8),        ("Device Removed/Device Absent",EventDirection::Deassert)),
    ((0x08 << 8) | 0x01, ("Device Inserted/Device Present",EventDirection::Assert)),
    ((0x09 << 8),        ("Device Disabled",EventDirection::Deassert)),
    ((0x09 << 8) | 0x01, ("Device Enabled",EventDirection::Assert)),
    ((0x0a << 8),        ("transition to Running",EventDirection::Assert)),
    ((0x0a << 8) | 0x01, ("transition to In Test",EventDirection::Assert)),
    ((0x0a << 8) | 0x02, ("transition to Power Off",EventDirection::Deassert)),
    ((0x0a << 8) | 0x03, ("transition to On Line",EventDirection::Assert)),
    ((0x0a << 8) | 0x04, ("transition to Off Line",EventDirection::Deassert)),
    ((0x0a << 8) | 0x05, ("transition to Off Duty",EventDirection::Deassert)),
    ((0x0a << 8) | 0x06, ("transition to Degraded",EventDirection::Deassert)),
    ((0x0a << 8) | 0x07, ("transition to Power Save",EventDirection::Deassert)),
    ((0x0a << 8) | 0x08, ("install Error",EventDirection::Deassert)),
    ((0x0b << 8),        ("Fully Redundant (formerly Redundancy Regained)",EventDirection::Assert)),
    ((0x0b << 8) | 0x01, ("Redundancy Lost",EventDirection::Deassert)),
    ((0x0b << 8) | 0x02, ("Redundancy Degraded",EventDirection::Deassert)),
    ((0x0b << 8) | 0x03, ("Non-redundant:Sufficient Resources from Redundant",EventDirection::Deassert)),
    ((0x0b << 8) | 0x04, ("Non-redundant:Sufficient Resources from Insufficient Resources",EventDirection::Deassert)),
    ((0x0b << 8) | 0x05, ("Non-redundant:Insufficient Resources",EventDirection::Assert)),
    ((0x0b << 8) | 0x06, ("Redundancy Degraded from Fully Redundant",EventDirection::Assert)),
    ((0x0b << 8) | 0x07, ("Redundancy Degraded from Non-redundant",EventDirection::Assert)),
    ((0x0c << 8),        ("D0 Power State",EventDirection::Deassert)),
    ((0x0c << 8) | 0x01, ("D1 Power State",EventDirection::Deassert)),
    ((0x0c << 8) | 0x02, ("D2 Power State",EventDirection::Deassert)),
    ((0x0c << 8) | 0x03, ("D3 Power State",EventDirection::Deassert)),
  ])
};

 pub static ref SENSOR_SPECIFIC_EVENT_DESC: HashMap<u32, (&'static str, EventDirection)> = {
    HashMap::from([
    // Sensor Type, Offset, Event Data2, Event Data3
    ((0x05 << 24) | (0xff << 8) | 0xff,                ("General Chassis Intrusion", EventDirection::Deassert)),
    ((0x05 << 24) | (0x01 << 16) | (0xff << 8) | 0xff, ("Drive Bay intrusion", EventDirection::Deassert)),
    ((0x05 << 24) | (0x02 << 16) | (0xff << 8) | 0xff, ("I/O Card area intrusion", EventDirection::Deassert)),
    ((0x05 << 24) | (0x03 << 16) | (0xff << 8) | 0xff, ("Processor area intrusion", EventDirection::Deassert)),
    ((0x05 << 24) | (0x04 << 16) | (0xff << 8) | 0xff, ("LAN Leash Lost (system is unplugged from LAN)", EventDirection::Deassert)),
    ((0x05 << 24) | (0x05 << 16) | (0xff << 8) | 0xff, ("Unauthorized dock", EventDirection::Deassert)),
    ((0x05 << 24) | (0x06 << 16) | (0xff << 8) | 0xff, ("FAN area intrusion (supports detection of hot plug fan tampering)", EventDirection::Deassert)),
    ((0x06 << 24) | (0xff << 8) | 0xff,                ("Secure Mode (Front Panel Lockout) Violation attempt", EventDirection::Deassert)),
    ((0x06 << 24) | (0x01 << 16) | (0xff << 8) | 0xff, ("Pre-boot Password Violation-user password", EventDirection::Deassert)),
    ((0x06 << 24) | (0x02 << 16) | (0xff << 8) | 0xff, ("Pre-boot Password Violation attempt-setup password", EventDirection::Deassert)),
    ((0x06 << 24) | (0x03 << 16) | (0xff << 8) | 0xff, ("Pre-boot Password Violation-network boot password", EventDirection::Deassert)),
    ((0x06 << 24) | (0x04 << 16) | (0xff << 8) | 0xff, ("Other pre-boot Password Violation", EventDirection::Deassert)),
    ((0x06 << 24) | (0x05 << 16) | (0xff << 8) | 0xff, ("Out-of-band Access Password Violation", EventDirection::Deassert)),
    ((0x07 << 24) | (0xff << 8) | 0xff,                ("IERR", EventDirection::Deassert)),
    ((0x07 << 24) | (0x01 << 16) | (0xff << 8) | 0xff, ("Thermal Trip", EventDirection::Deassert)),
    ((0x07 << 24) | (0x02 << 16) | (0xff << 8) | 0xff, ("FRB1/BIST failure", EventDirection::Deassert)),
    ((0x07 << 24) | (0x03 << 16) | (0xff << 8) | 0xff, ("FRB2/Hang in POST failure", EventDirection::Deassert)),
    ((0x07 << 24) | (0x04 << 16) | (0xff << 8) | 0xff, ("FRB3/Processor Startup/Initialization failure", EventDirection::Deassert)),
    ((0x07 << 24) | (0x05 << 16) | (0xff << 8) | 0xff, ("Configuration Error", EventDirection::Deassert)),
    ((0x07 << 24) | (0x06 << 16) | (0xff << 8) | 0xff, ("SM BIOS `Uncorrectable CPU-complex Error'", EventDirection::Deassert)),
    ((0x07 << 24) | (0x07 << 16) | (0xff << 8) | 0xff, ("Processor Presence detected", EventDirection::Assert)),
    ((0x07 << 24) | (0x08 << 16) | (0xff << 8) | 0xff, ("Processor disabled", EventDirection::Deassert)),
    ((0x07 << 24) | (0x09 << 16) | (0xff << 8) | 0xff, ("Terminator Presence Detected", EventDirection::Assert)),
    ((0x07 << 24) | (0x0a << 16) | (0xff << 8) | 0xff, ("Processor Automatically Throttled", EventDirection::Assert)),
    ((0x07 << 24) | (0x0b << 16) | (0xff << 8) | 0xff, ("Machine Check Exception (Uncorrectable)", EventDirection::Deassert)),
    ((0x07 << 24) | (0x0c << 16) | (0xff << 8) | 0xff, ("Correctable Machine Check Error", EventDirection::Deassert)),
    ((0x08 << 24) | (0xff << 8) | 0xff,                ("Presence detected", EventDirection::Assert)),
    ((0x08 << 24) | (0x01 << 16) | (0xff << 8) | 0xff, ("Power Supply Failure detected", EventDirection::Deassert)),
    ((0x08 << 24) | (0x02 << 16) | (0xff << 8) | 0xff, ("Predictive Failure", EventDirection::Deassert)),
    ((0x08 << 24) | (0x03 << 16) | (0xff << 8) | 0xff, ("Power Supply input lost (AC/DC)", EventDirection::Deassert)),
    ((0x08 << 24) | (0x04 << 16) | (0xff << 8) | 0xff, ("Power Supply input lost or out-of-range", EventDirection::Deassert)),
    ((0x08 << 24) | (0x05 << 16) | (0xff << 8) | 0xff, ("Power Supply input out-of-range, but present", EventDirection::Deassert)),
    ((0x08 << 24) | (0x06 << 16) | (0xff << 8),        ("Configuration error : Vendor mismatch", EventDirection::Deassert)),
    ((0x08 << 24) | (0x06 << 16) | (0xff << 8) | 0x01, ("Configuration error : Revision mismatch", EventDirection::Deassert)),
    ((0x08 << 24) | (0x06 << 16) | (0xff << 8) | 0x02, ("Configuration error : Processor missing", EventDirection::Deassert)),
    ((0x08 << 24) | (0x06 << 16) | (0xff << 8) | 0x03, ("Configuration error : Power Supply rating mismatch", EventDirection::Deassert)),
    ((0x08 << 24) | (0x06 << 16) | (0xff << 8) | 0x04, ("Configuration error : Voltage rating mismatch", EventDirection::Deassert)),
    ((0x08 << 24) | (0x06 << 16) | (0xff << 8) | 0xff, ("Configuration error", EventDirection::Deassert)),
    ((0x08 << 24) | (0x07 << 16) | (0xff << 8) | 0xff, ("Power Supply Inactive (in standby state)", EventDirection::Deassert)),
    ((0x09 << 24) | (0xff << 8) | 0xff,                ("Power Off / Power Down", EventDirection::Deassert)),
    ((0x09 << 24) | (0x01 << 16) | (0xff << 8) | 0xff, ("Power Cycle", EventDirection::Deassert)),
    ((0x09 << 24) | (0x02 << 16) | (0xff << 8) | 0xff, ("240VA Power Down", EventDirection::Deassert)),
    ((0x09 << 24) | (0x03 << 16) | (0xff << 8) | 0xff, ("Interlock Power Down", EventDirection::Deassert)),
    ((0x09 << 24) | (0x04 << 16) | (0xff << 8) | 0xff, ("AC lost / Power input lost", EventDirection::Deassert)),
    ((0x09 << 24) | (0x05 << 16) | (0xff << 8) | 0xff, ("Soft Power Control Failure", EventDirection::Deassert)),
    ((0x09 << 24) | (0x06 << 16) | (0xff << 8) | 0xff, ("Power Unit Failure detected", EventDirection::Deassert)),
    ((0x09 << 24) | (0x07 << 16) | (0xff << 8) | 0xff, ("Predictive Failure", EventDirection::Deassert)),
    ((0x0c << 24) | (0xff << 8) | 0xff,                ("Correctable ECC / other correctable memory error", EventDirection::Deassert)),
    ((0x0c << 24) | (0x01 << 16) | (0xff << 8) | 0xff, ("Uncorrectable ECC / other uncorrectable memory error", EventDirection::Deassert)),
    ((0x0c << 24) | (0x02 << 16) | (0xff << 8) | 0xff, ("Parity", EventDirection::Deassert)),
    ((0x0c << 24) | (0x03 << 16) | (0xff << 8) | 0xff, ("Memory Scrub Failed (stuck bit)", EventDirection::Deassert)),
    ((0x0c << 24) | (0x04 << 16) | (0xff << 8) | 0xff, ("Memory Device Disabled", EventDirection::Deassert)),
    ((0x0c << 24) | (0x05 << 16) | (0xff << 8) | 0xff, ("Correctable ECC / other correctable memory error logging limit reached", EventDirection::Deassert)),
    ((0x0c << 24) | (0x06 << 16) | (0xff << 8) | 0xff, ("Presence detected", EventDirection::Assert)),
    ((0x0c << 24) | (0x07 << 16) | (0xff << 8) | 0xff, ("Configuration error", EventDirection::Deassert)),
    ((0x0c << 24) | (0x08 << 16) | (0xff << 8) | 0xff, ("Spare", EventDirection::Deassert)),
    ((0x0c << 24) | (0x09 << 16) | (0xff << 8) | 0xff, ("Memory Automatically Throttled", EventDirection::Deassert)),
    ((0x0c << 24) | (0x0a << 16) | (0xff << 8) | 0xff, ("Critical Overtemperature", EventDirection::Deassert)),
    ((0x0d << 24) | (0xff << 8) | 0xff,                ("Drive Presence", EventDirection::Assert)),
    ((0x0d << 24) | (0x01 << 16) | (0xff << 8) | 0xff, ("Drive Fault", EventDirection::Deassert)),
    ((0x0d << 24) | (0x02 << 16) | (0xff << 8) | 0xff, ("Predictive Failure", EventDirection::Deassert)),
    ((0x0d << 24) | (0x03 << 16) | (0xff << 8) | 0xff, ("Hot Spare", EventDirection::Deassert)),
    ((0x0d << 24) | (0x04 << 16) | (0xff << 8) | 0xff, ("Consistency Check / Parity Check in progress", EventDirection::Deassert)),
    ((0x0d << 24) | (0x05 << 16) | (0xff << 8) | 0xff, ("In Critical Array", EventDirection::Deassert)),
    ((0x0d << 24) | (0x06 << 16) | (0xff << 8) | 0xff, ("In Failed Array", EventDirection::Deassert)),
    ((0x0d << 24) | (0x07 << 16) | (0xff << 8) | 0xff, ("Rebuild/Remap in progress", EventDirection::Deassert)),
    ((0x0d << 24) | (0x08 << 16) | (0xff << 8) | 0xff, ("Rebuild/Remap Aborted (was not completed normally)", EventDirection::Deassert)),
    ((0x0f << 24) | 0xff,                              ("System Firmware Error : Unspecified", EventDirection::Deassert)),
    ((0x0f << 24) | (0x01 << 8) | 0xff,                ("System Firmware Error : No system memory is physically installed in the system", EventDirection::Deassert)),
    ((0x0f << 24) | (0x02 << 8) | 0xff,                ("System Firmware Error : No usable system memory", EventDirection::Deassert)),
    ((0x0f << 24) | (0x03 << 8) | 0xff,                ("System Firmware Error : Unrecoverable hard-disk/ATAPI IDE device failure", EventDirection::Deassert)),
    ((0x0f << 24) | (0x04 << 8) | 0xff,                ("System Firmware Error : Unrecoverable system-board failure", EventDirection::Deassert)),
    ((0x0f << 24) | (0x05 << 8) | 0xff,                ("System Firmware Error : Unrecoverable diskettesubsystem failure", EventDirection::Deassert)),
    ((0x0f << 24) | (0x06 << 8) | 0xff,                ("System Firmware Error : Unrecoverable hard- disk controller failure", EventDirection::Deassert)),
    ((0x0f << 24) | (0x07 << 8) | 0xff,                ("System Firmware Error : Unrecoverable PS/2 or USB keyboard failure", EventDirection::Deassert)),
    ((0x0f << 24) | (0x08 << 8) | 0xff,                ("System Firmware Error : Removable boot media not),found", EventDirection::Deassert)),
    ((0x0f << 24) | (0x09 << 8) | 0xff,                ("System Firmware Error : Unrecoverable video controller failure", EventDirection::Deassert)),
    ((0x0f << 24) | (0x0a << 8) | 0xff,                ("System Firmware Error : No video device detected", EventDirection::Deassert)),
    ((0x0f << 24) | (0x0b << 8) | 0xff,                ("System Firmware Error : Firmware (BIOS) ROM corruption detected", EventDirection::Deassert)),
    ((0x0f << 24) | (0x0c << 8) | 0xff,                ("System Firmware Error : CPU voltage mismatch", EventDirection::Deassert)),
    ((0x0f << 24) | (0x0d << 8) | 0xff,                ("System Firmware Error : CPU speed matching failure", EventDirection::Deassert)),
    ((0x0f << 24) | (0xff << 8) | 0xff,                ("System Firmware Error", EventDirection::Deassert)),
    ((0x0f << 24) | (0x01 << 16) | (0xff << 8) | 0xff, ("System Firmware Hang", EventDirection::Deassert)),
    ((0x0f << 24) | (0x02 << 16) | 0xff,               ("System Firmware Progress : Unspecified", EventDirection::Assert)),
    ((0x0f << 24) | (0x02 << 16) | (0x01 << 8) | 0xff, ("System Firmware Progress : Memory initialization", EventDirection::Assert)),
    ((0x0f << 24) | (0x02 << 16) | (0x02 << 8) | 0xff, ("System Firmware Progress : Hard-disk initialization", EventDirection::Assert)),
    ((0x0f << 24) | (0x02 << 16) | (0x03 << 8) | 0xff, ("System Firmware Progress : Secondary processor(s) initialization", EventDirection::Assert)),
    ((0x0f << 24) | (0x02 << 16) | (0x04 << 8) | 0xff, ("System Firmware Progress : User authentication", EventDirection::Assert)),
    ((0x0f << 24) | (0x02 << 16) | (0x05 << 8) | 0xff, ("System Firmware Progress : User-initiated system),setup", EventDirection::Assert)),
    ((0x0f << 24) | (0x02 << 16) | (0x06 << 8) | 0xff, ("System Firmware Progress : USB resource configuration", EventDirection::Assert)),
    ((0x0f << 24) | (0x02 << 16) | (0x07 << 8) | 0xff, ("System Firmware Progress : PCI resource configuration", EventDirection::Assert)),
    ((0x0f << 24) | (0x02 << 16) | (0x08 << 8) | 0xff, ("System Firmware Progress : Option ROM initialization", EventDirection::Assert)),
    ((0x0f << 24) | (0x02 << 16) | (0x09 << 8) | 0xff, ("System Firmware Progress : Video initialization", EventDirection::Assert)),
    ((0x0f << 24) | (0x02 << 16) | (0x0a << 8) | 0xff, ("System Firmware Progress : Cache initialization", EventDirection::Assert)),
    ((0x0f << 24) | (0x02 << 16) | (0x0b << 8) | 0xff, ("System Firmware Progress : SM Bus initialization", EventDirection::Assert)),
    ((0x0f << 24) | (0x02 << 16) | (0x0c << 8) | 0xff, ("System Firmware Progress : Keyboard controller initialization", EventDirection::Assert)),
    ((0x0f << 24) | (0x02 << 16) | (0x0d << 8) | 0xff, ("System Firmware Progress : Embedded controller management controlle, EventDirection::Assertr) initialization", EventDirection::Assert)),
    ((0x0f << 24) | (0x02 << 16) | (0x0e << 8) | 0xff, ("System Firmware Progress : Docking station attachment", EventDirection::Assert)),
    ((0x0f << 24) | (0x02 << 16) | (0x0f << 8) | 0xff, ("System Firmware Progress : Enabling docking station", EventDirection::Assert)),
    ((0x0f << 24) | (0x02 << 16) | (0x10 << 8) | 0xff, ("System Firmware Progress : Docking station ejection", EventDirection::Assert)),
    ((0x0f << 24) | (0x02 << 16) | (0x11 << 8) | 0xff, ("System Firmware Progress : Disabling docking station", EventDirection::Assert)),
    ((0x0f << 24) | (0x02 << 16) | (0x12 << 8) | 0xff, ("System Firmware Progress : Calling operating system wake-up vector", EventDirection::Assert)),
    ((0x0f << 24) | (0x02 << 16) | (0x13 << 8) | 0xff, ("System Firmware Progress : Starting operating system boot process", EventDirection::Assert)),
    ((0x0f << 24) | (0x02 << 16) | (0x14 << 8) | 0xff, ("System Firmware Progress : Baseboard or motherboard initialization", EventDirection::Assert)),
    ((0x0f << 24) | (0x02 << 16) | (0x15 << 8) | 0xff, ("System Firmware Progress : reserved", EventDirection::Assert)),
    ((0x0f << 24) | (0x02 << 16) | (0x16 << 8) | 0xff, ("System Firmware Progress : Floppy initialization", EventDirection::Assert)),
    ((0x0f << 24) | (0x02 << 16) | (0x17 << 8) | 0xff, ("System Firmware Progress : Keyboard test", EventDirection::Assert)),
    ((0x0f << 24) | (0x02 << 16) | (0x18 << 8) | 0xff, ("System Firmware Progress : Pointing device test", EventDirection::Assert)),
    ((0x0f << 24) | (0x02 << 16) | (0x19 << 8) | 0xff, ("System Firmware Progress : Primary processor initialization", EventDirection::Assert)),
    ((0x0f << 24) | (0x02 << 16) | (0xff << 8) | 0xff, ("System Firmware Progress", EventDirection::Assert)),
    ((0x10 << 24) | (0xff << 8) | 0xff,                ("Correctable Memory Error Logging Disabled", EventDirection::Deassert)),
    ((0x10 << 24) | (0x01 << 16) | (0xff << 8) | 0xff, ("Event 'Type' Logging Disabled", EventDirection::Deassert)),
    ((0x10 << 24) | (0x02 << 16) | (0xff << 8) | 0xff, ("Log Area Reset/Cleared", EventDirection::Deassert)),
    ((0x10 << 24) | (0x03 << 16) | (0xff << 8) | 0xff, ("All Event Logging Disabled", EventDirection::Deassert)),
    ((0x10 << 24) | (0x04 << 16) | (0xff << 8) | 0xff, ("SEL Full", EventDirection::Deassert)),
    ((0x10 << 24) | (0x05 << 16) | (0xff << 8) | 0xff, ("SEL Almost Full", EventDirection::Deassert)),
    ((0x10 << 24) | (0x06 << 16) | (0xff << 8) | 0xff, ("Correctable Machine Check Error Logging Disabled", EventDirection::Deassert)),
    ((0x11 << 24) | (0xff << 8) | 0xff,                ("BIOS Watchdog Reset", EventDirection::Deassert)),
    ((0x11 << 24) | (0x01 << 16) | (0xff << 8) | 0xff, ("OS Watchdog Reset", EventDirection::Deassert)),
    ((0x11 << 24) | (0x02 << 16) | (0xff << 8) | 0xff, ("OS Watchdog Shut Down", EventDirection::Deassert)),
    ((0x11 << 24) | (0x03 << 16) | (0xff << 8) | 0xff, ("OS Watchdog Power Down", EventDirection::Deassert)),
    ((0x11 << 24) | (0x04 << 16) | (0xff << 8) | 0xff, ("OS Watchdog Power Cycle", EventDirection::Deassert)),
    ((0x11 << 24) | (0x05 << 16) | (0xff << 8) | 0xff, ("OS Watchdog NMI / Diagnostic Interrupt", EventDirection::Deassert)),
    ((0x11 << 24) | (0x06 << 16) | (0xff << 8) | 0xff, ("OS Watchdog Expired, status only", EventDirection::Deassert)),
    ((0x11 << 24) | (0x07 << 16) | (0xff << 8) | 0xff, ("OS Watchdog pre-timeout Interrupt, non-NMI", EventDirection::Deassert)),
    ((0x12 << 24) | (0xff << 8) | 0xff,                ("System Reconfigured", EventDirection::Deassert)),
    ((0x12 << 24) | (0x01 << 16) | (0xff << 8) | 0xff, ("OEM System Boot Event", EventDirection::Deassert)),
    ((0x12 << 24) | (0x02 << 16) | (0xff << 8) | 0xff, ("Undetermined system hardware failure", EventDirection::Deassert)),
    ((0x12 << 24) | (0x03 << 16) | (0xff << 8) | 0xff, ("Entry added to Auxiliary Log", EventDirection::Deassert)),
    ((0x12 << 24) | (0x04 << 16) | (0xff << 8) | 0xff, ("PEF Action", EventDirection::Deassert)),
    ((0x12 << 24) | (0x05 << 16) | (0xff << 8) | 0xff, ("Timestamp Clock Synch", EventDirection::Assert)),
    ((0x13 << 24) | (0xff << 8) | 0xff,                ("Front Panel NMI / Diagnostic Interrupt", EventDirection::Deassert)),
    ((0x13 << 24) | (0x01 << 16) | (0xff << 8) | 0xff, ("Bus Timeout", EventDirection::Deassert)),
    ((0x13 << 24) | (0x02 << 16) | (0xff << 8) | 0xff, ("I/O channel check NMI", EventDirection::Deassert)),
    ((0x13 << 24) | (0x03 << 16) | (0xff << 8) | 0xff, ("Software NMI", EventDirection::Deassert)),
    ((0x13 << 24) | (0x04 << 16) | (0xff << 8) | 0xff, ("PCI PERR", EventDirection::Deassert)),
    ((0x13 << 24) | (0x05 << 16) | (0xff << 8) | 0xff, ("PCI SERR", EventDirection::Deassert)),
    ((0x13 << 24) | (0x06 << 16) | (0xff << 8) | 0xff, ("EISA Fail Safe Timeout", EventDirection::Deassert)),
    ((0x13 << 24) | (0x07 << 16) | (0xff << 8) | 0xff, ("Bus Correctable Error", EventDirection::Deassert)),
    ((0x13 << 24) | (0x08 << 16) | (0xff << 8) | 0xff, ("Bus Uncorrectable Error", EventDirection::Deassert)),
    ((0x13 << 24) | (0x09 << 16) | (0xff << 8) | 0xff, ("Fatal NMI", EventDirection::Deassert)),
    ((0x13 << 24) | (0x0a << 16) | (0xff << 8) | 0xff, ("Bus Fatal Error", EventDirection::Deassert)),
    ((0x13 << 24) | (0x0b << 16) | (0xff << 8) | 0xff, ("Bus Degraded", EventDirection::Deassert)),
    ((0x14 << 24) | (0xff << 8) | 0xff,                ("Power Button pressed", EventDirection::Deassert)),
    ((0x14 << 24) | (0x01 << 16) | (0xff << 8) | 0xff, ("Sleep Button pressed", EventDirection::Deassert)),
    ((0x14 << 24) | (0x02 << 16) | (0xff << 8) | 0xff, ("Reset Button pressed", EventDirection::Deassert)),
    ((0x14 << 24) | (0x03 << 16) | (0xff << 8) | 0xff, ("FRU latch open", EventDirection::Deassert)),
    ((0x14 << 24) | (0x04 << 16) | (0xff << 8) | 0xff, ("FRU service request button", EventDirection::Deassert)),
    ((0x19 << 24) | (0xff << 8) | 0xff,                ("Soft Power Control Failure", EventDirection::Deassert)),
    ((0x19 << 24) | (0x01 << 16) | (0xff << 8) | 0xff, ("Thermal Trip", EventDirection::Deassert)),
    ((0x1b << 24) | (0xff << 8) | 0xff,                ("Cable/Interconnect is connected", EventDirection::Assert)),
    ((0x1b << 24) | (0x01 << 16) | (0xff << 8) | 0xff, ("Configuration Error", EventDirection::Assert)),
    ((0x1d << 24) | (0xff << 8) | 0xff,                ("Initiated by power up", EventDirection::Deassert)),
    ((0x1d << 24) | (0x01 << 16) | (0xff << 8) | 0xff, ("Initiated by hard reset", EventDirection::Deassert)),
    ((0x1d << 24) | (0x02 << 16) | (0xff << 8) | 0xff, ("Initiated by warm reset", EventDirection::Deassert)),
    ((0x1d << 24) | (0x03 << 16) | (0xff << 8) | 0xff, ("User requested PXE boot", EventDirection::Deassert)),
    ((0x1d << 24) | (0x04 << 16) | (0xff << 8) | 0xff, ("Automatic boot to diagnostic", EventDirection::Deassert)),
    ((0x1d << 24) | (0x05 << 16) | (0xff << 8) | 0xff, ("OS / run-time software initiated hard reset", EventDirection::Deassert)),
    ((0x1d << 24) | (0x06 << 16) | (0xff << 8) | 0xff, ("OS / run-time software initiated warm reset", EventDirection::Deassert)),
    ((0x1d << 24) | (0x07 << 16) | (0xff << 8) | 0xff, ("System Restart", EventDirection::Deassert)),
    ((0x1e << 24) | (0xff << 8) | 0xff,                ("No bootable media", EventDirection::Deassert)),
    ((0x1e << 24) | (0x01 << 16) | (0xff << 8) | 0xff, ("Non-bootable diskette left in drive", EventDirection::Deassert)),
    ((0x1e << 24) | (0x02 << 16) | (0xff << 8) | 0xff, ("PXE Server not found", EventDirection::Deassert)),
    ((0x1e << 24) | (0x03 << 16) | (0xff << 8) | 0xff, ("Invalid boot sector", EventDirection::Deassert)),
    ((0x1e << 24) | (0x04 << 16) | (0xff << 8) | 0xff, ("Timeout waiting for user selection of boot source", EventDirection::Deassert)),
    ((0x1f << 24) | (0xff << 8) | 0xff,                ("A: boot completed", EventDirection::Assert)),
    ((0x1f << 24) | (0x01 << 16) | (0xff << 8) | 0xff, ("C: boot completed", EventDirection::Assert)),
    ((0x1f << 24) | (0x02 << 16) | (0xff << 8) | 0xff, ("PXE boot completed", EventDirection::Assert)),
    ((0x1f << 24) | (0x03 << 16) | (0xff << 8) | 0xff, ("Diagnostic boot completed", EventDirection::Assert)),
    ((0x1f << 24) | (0x04 << 16) | (0xff << 8) | 0xff, ("CD-ROM boot completed", EventDirection::Assert)),
    ((0x1f << 24) | (0x05 << 16) | (0xff << 8) | 0xff, ("ROM boot completed", EventDirection::Assert)),
    ((0x1f << 24) | (0x06 << 16) | (0xff << 8) | 0xff, ("boot completed-boot device not specified", EventDirection::Deassert)),
    ((0x1f << 24) | (0x07 << 16) | (0xff << 8) | 0xff, ("Base OS/Hypervisor Installation started", EventDirection::Assert)),
    ((0x1f << 24) | (0x08 << 16) | (0xff << 8) | 0xff, ("Base OS/Hypervisor Installation completed", EventDirection::Assert)),
    ((0x1f << 24) | (0x09 << 16) | (0xff << 8) | 0xff, ("Base OS/Hypervisor Installation aborted", EventDirection::Deassert)),
    ((0x1f << 24) | (0x0a << 16) | (0xff << 8) | 0xff, ("Base OS/Hypervisor Installation failed", EventDirection::Deassert)),
    ((0x20 << 24) | (0xff << 8) | 0xff,                ("Critical stop during OS load / initialization", EventDirection::Deassert)),
    ((0x20 << 24) | (0x01 << 16) | (0xff << 8) | 0xff, ("Run-time Critical Stop", EventDirection::Deassert)),
    ((0x20 << 24) | (0x02 << 16) | (0xff << 8) | 0xff, ("OS Graceful Stop", EventDirection::Deassert)),
    ((0x20 << 24) | (0x03 << 16) | (0xff << 8) | 0xff, ("OS Graceful Shutdown", EventDirection::Deassert)),
    ((0x20 << 24) | (0x04 << 16) | (0xff << 8) | 0xff, ("Soft Shutdown initiated by PEF", EventDirection::Deassert)),
    ((0x20 << 24) | (0x05 << 16) | (0xff << 8) | 0xff, ("Agent Not Responding", EventDirection::Deassert)),
    ((0x21 << 24) | (0xff << 8) | 0xff,                ("Fault Status asserted", EventDirection::Deassert)),
    ((0x21 << 24) | (0x01 << 16) | (0xff << 8) | 0xff, ("Identify Status asserted", EventDirection::Assert)),
    ((0x21 << 24) | (0x02 << 16) | (0xff << 8) | 0xff, ("Slot/Connector Device installed/attached", EventDirection::Assert)),
    ((0x21 << 24) | (0x03 << 16) | (0xff << 8) | 0xff, ("Slot/Connector Ready for Device Installation", EventDirection::Assert)),
    ((0x21 << 24) | (0x04 << 16) | (0xff << 8) | 0xff, ("Slot/Connector Ready for Device Removal", EventDirection::Assert)),
    ((0x21 << 24) | (0x05 << 16) | (0xff << 8) | 0xff, ("Slot Power is Off", EventDirection::Assert)),
    ((0x21 << 24) | (0x06 << 16) | (0xff << 8) | 0xff, ("Slot/Connector Device Removal Request", EventDirection::Assert)),
    ((0x21 << 24) | (0x07 << 16) | (0xff << 8) | 0xff, ("Interlock asserted", EventDirection::Assert)),
    ((0x21 << 24) | (0x08 << 16) | (0xff << 8) | 0xff, ("Slot is Disabled", EventDirection::Deassert)),
    ((0x21 << 24) | (0x09 << 16) | (0xff << 8) | 0xff, ("Slot holds spare device", EventDirection::Assert)),
    ((0x22 << 24) | (0xff << 8) | 0xff,                ("S0/G0 \"working\"", EventDirection::Assert)),
    ((0x22 << 24) | (0x01 << 16) | (0xff << 8) | 0xff, ("S1 \"sleeping with system h/w & processor context maintained\"", EventDirection::Assert)),
    ((0x22 << 24) | (0x02 << 16) | (0xff << 8) | 0xff, ("S2 \"sleeping, processor context lost\"", EventDirection::Assert)),
    ((0x22 << 24) | (0x03 << 16) | (0xff << 8) | 0xff, ("S3 \"sleeping, processor & h/w context lost, memory retained\"", EventDirection::Assert)),
    ((0x22 << 24) | (0x04 << 16) | (0xff << 8) | 0xff, ("S4 \"non-volatile sleep / suspend-to disk\"", EventDirection::Assert)),
    ((0x22 << 24) | (0x05 << 16) | (0xff << 8) | 0xff, ("S5/G2 \"soft-off\"", EventDirection::Assert)),
    ((0x22 << 24) | (0x06 << 16) | (0xff << 8) | 0xff, ("S4/S5 soft-off, particular S4 / S5 state cannot be determined", EventDirection::Assert)),
    ((0x22 << 24) | (0x07 << 16) | (0xff << 8) | 0xff, ("G3/Mechanical Off", EventDirection::Assert)),
    ((0x22 << 24) | (0x08 << 16) | (0xff << 8) | 0xff, ("Sleeping in an S1, S2, or S3 states", EventDirection::Assert)),
    ((0x22 << 24) | (0x09 << 16) | (0xff << 8) | 0xff, ("G1 sleeping", EventDirection::Assert)),
    ((0x22 << 24) | (0x0a << 16) | (0xff << 8) | 0xff, ("S5 entered by override", EventDirection::Assert)),
    ((0x22 << 24) | (0x0b << 16) | (0xff << 8) | 0xff, ("Legacy ON state", EventDirection::Assert)),
    ((0x22 << 24) | (0x0c << 16) | (0xff << 8) | 0xff, ("Legacy OFF state", EventDirection::Assert)),
    ((0x22 << 24) | (0x0e << 16) | (0xff << 8) | 0xff, ("Unknown", EventDirection::Assert)),
    ((0x23 << 24) | (0xff << 8) | 0xff,                ("Timer expired, status only", EventDirection::Assert)),
    ((0x23 << 24) | (0x01 << 16) | (0xff << 8) | 0xff, ("Hard Reset", EventDirection::Deassert)),
    ((0x23 << 24) | (0x02 << 16) | (0xff << 8) | 0xff, ("Power Down", EventDirection::Deassert)),
    ((0x23 << 24) | (0x03 << 16) | (0xff << 8) | 0xff, ("Power Cycle", EventDirection::Deassert)),
    ((0x23 << 24) | (0x04 << 16) | (0xff << 8) | 0xff, ("reserved", EventDirection::Deassert)),
    ((0x23 << 24) | (0x05 << 16) | (0xff << 8) | 0xff, ("reserved", EventDirection::Deassert)),
    ((0x23 << 24) | (0x06 << 16) | (0xff << 8) | 0xff, ("reserved", EventDirection::Deassert)),
    ((0x23 << 24) | (0x07 << 16) | (0xff << 8) | 0xff, ("reserved", EventDirection::Deassert)),
    ((0x23 << 24) | (0x08 << 16) | (0xff << 8) | 0xff, ("Timer interrupt", EventDirection::Deassert)),
    ((0x24 << 24) | (0xff << 8) | 0xff,                ("platform generated page", EventDirection::Assert)),
    ((0x24 << 24) | (0x01 << 16) | (0xff << 8) | 0xff, ("platform generated LAN alert", EventDirection::Deassert)),
    ((0x24 << 24) | (0x02 << 16) | (0xff << 8) | 0xff, ("Platform Event Trap generated", EventDirection::Deassert)),
    ((0x24 << 24) | (0x03 << 16) | (0xff << 8) | 0xff, ("platform generated SNMP trap, OEM format", EventDirection::Assert)),
    ((0x25 << 24) | (0xff << 8) | 0xff,                ("Entity Present", EventDirection::Assert)),
    ((0x25 << 24) | (0x01 << 16) | (0xff << 8) | 0xff, ("Entity Absent", EventDirection::Deassert)),
    ((0x25 << 24) | (0x02 << 16) | (0xff << 8) | 0xff, ("Entity Disabled", EventDirection::Deassert)),
    ((0x27 << 24) | (0xff << 8) | 0xff,                ("LAN Heartbeat Lost", EventDirection::Deassert)),
    ((0x27 << 24) | (0x01 << 16) | (0xff << 8) | 0xff, ("LAN Heartbeat", EventDirection::Assert)),
    ((0x28 << 24) | (0xff << 8) | 0xff,                ("sensor access degraded or unavailable", EventDirection::Deassert)),
    ((0x28 << 24) | (0x01 << 16) | (0xff << 8) | 0xff, ("controller access degraded or unavailable", EventDirection::Deassert)),
    ((0x28 << 24) | (0x02 << 16) | (0xff << 8) | 0xff, ("management controller off-line", EventDirection::Deassert)),
    ((0x28 << 24) | (0x03 << 16) | (0xff << 8) | 0xff, ("management controller unavailable", EventDirection::Deassert)),
    ((0x28 << 24) | (0x04 << 16) | (0xff << 8) | 0xff, ("sensor failure", EventDirection::Deassert)),
    ((0x28 << 24) | (0x05 << 16) | (0xff << 8) | 0xff, ("FRU failure", EventDirection::Deassert)),
    ((0x29 << 24) | (0xff << 8) | 0xff,                ("battery low", EventDirection::Deassert)),
    ((0x29 << 24) | (0x01 << 16) | (0xff << 8) | 0xff, ("battery failed", EventDirection::Deassert)),
    ((0x29 << 24) | (0x02 << 16) | (0xff << 8) | 0xff, ("battery presence detected", EventDirection::Assert)),
    ((0x2a << 24) | (0xff << 8) | 0xff,                ("Session Activated", EventDirection::Assert)),
    ((0x2a << 24) | (0x01 << 16) | (0xff << 8) | 0xff, ("Session Deactivated", EventDirection::Assert)),
    ((0x2a << 24) | (0x02 << 16) | (0xff << 8) | 0xff, ("Invalid Username or Password", EventDirection::Deassert)),
    ((0x2a << 24) | (0x03 << 16) | (0xff << 8) | 0xff, ("Invalid Password Disable", EventDirection::Deassert)),
    ((0x2b << 24) | (0xff << 8) | 0xff,                ("Hardware change detected with associated Entity", EventDirection::Deassert)),
    ((0x2b << 24) | (0x01 << 16) | (0xff << 8) | 0xff, ("Firmware or software change detected with associated Entity", EventDirection::Deassert)),
    ((0x2b << 24) | (0x02 << 16) | (0xff << 8) | 0xff, ("Hardware incompatibility detected with associated Entity", EventDirection::Deassert)),
    ((0x2b << 24) | (0x03 << 16) | (0xff << 8) | 0xff, ("Firmware or software incompatibility detected with associated Entity", EventDirection::Deassert)),
    ((0x2b << 24) | (0x04 << 16) | (0xff << 8) | 0xff, ("Entity is of an invalid or unsupported hardware version", EventDirection::Deassert)),
    ((0x2b << 24) | (0x05 << 16) | (0xff << 8) | 0xff, ("Entity contains an invalid or unsupported firmware or software version", EventDirection::Deassert)),
    ((0x2b << 24) | (0x06 << 16) | (0xff << 8) | 0xff, ("Hardware Change detected with associated Entity was successful", EventDirection::Assert)),
    ((0x2b << 24) | (0x07 << 16) | (0xff << 8) | 0xff, ("Software or F/W Change detected with associated Entity was successful", EventDirection::Assert)),
    ((0x2c << 24) | (0xff << 8) | 0xff,                ("FRU Not Installed", EventDirection::Deassert)),
    ((0x2c << 24) | (0x01 << 16) | (0xff << 8) | 0xff, ("FRU Inactive", EventDirection::Deassert)),
    ((0x2c << 24) | (0x02 << 16) | (0xff << 8) | 0xff, ("FRU Activation Requested", EventDirection::Assert)),
    ((0x2c << 24) | (0x03 << 16) | (0xff << 8) | 0xff, ("FRU Activation In Progress", EventDirection::Assert)),
    ((0x2c << 24) | (0x04 << 16) | (0xff << 8) | 0xff, ("FRU Active", EventDirection::Assert)),
    ((0x2c << 24) | (0x05 << 16) | (0xff << 8) | 0xff, ("FRU Deactivation Requested", EventDirection::Assert)),
    ((0x2c << 24) | (0x06 << 16) | (0xff << 8) | 0xff, ("FRU Deactivation In Progress", EventDirection::Assert)),
    ((0x2c << 24) | (0x07 << 16) | (0xff << 8) | 0xff, ("FRU Communication Lost", EventDirection::Deassert)),
    ])
  };
}
